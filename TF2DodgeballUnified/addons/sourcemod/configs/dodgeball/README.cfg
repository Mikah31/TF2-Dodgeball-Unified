This is a more indepth explanation of all config items & some examples

General formula's:
Formula's should not contain spaces, or double signs like 3+-2 and should be written explicitly -> 50*x
Operands: +, -, *, /, ^, ()
Special variables:
x -> deflection count
s -> rocket speed
a -> 0.0 until deflection threshold is reached, then 1.0
b -> 0.0 until deflection threshold is reached, then 1.0

Rocket - All things related to the rocket/formula's
{
    Rocket Damage
    {
        "damage formula" - Formula that calculates the rocket damage

        example_1: "90+50*x" -> a rocket with damage starting at 90, increasing with 50 each deflect
        example_2: "s*0.1" -> rocket damage increases with rocket speed instead of deflects

        note: critical damage is accounted for

        Both formula types are equally viable for damage
    }

    Thresholds
    {
        "threshold a" - Deflects at which variable 'a' in formula's is 1.0 instead of 0.0
        "threshold b" - Same goes for variable 'b'

        These were created to activate & deactivate something at x deflects so that piecewise functions can be created
    }
    
    Rocket speed
    {
        note: In previous plugins sv_maxvelocity (max speed) was capped at 3500, which is about 150 mph, it is now unlocked

        "speed formula" - Formula that calculates the rocket speed, this is NOT in mph

        example_1: "850+300*x" -> A rocket that starts at 850 speed, and increases with 300 each deflect
        example_2: "5500+(1000-5500)/(1+(x/8.0)^2.0)" -> This is a sigmoid function, it limits itself as x increases
        This particular function starts at 1000 speed, is at 2750 speed at 8 deflects & has a max speed of 5500 deflects

        A visualization of example_2: https://www.desmos.com/calculator/4xb3fmgbjk, speed (mph) on y-axis, deflection count on x-axis
        sigmoid template: "d+(a-d)/(1+(x/c)^b)", copy the output variables from the visualization (a, b, c & d) into the template after adjusting sliders

        why should we use example_2?: as x increases the rocket speed does not limit itself, which means the speed gets so high that it will be impossible to deflect

        example_1, but selflimiting: "850+300*x-a*(x-14)*300" -> A rocket that starts at 850 speed, increases with 300 deflects, and stops increasing after 14 deflects (threshold a = 14, so at 14 deflects: a = 1.0)

        Further note: 1 Mph ≈ 26.5 speed
        example_3: "26.5*(50+10*x)" -> A rocket that starts at 50 mph, and increases with 10 mph each deflect, not self limiting
    }
    
    Turning
    {
        "turnrate formula" - Formula that calculates the turnrate
        note: The rocket turns every frame (≈0.0167 seconds) meaning that turnrate should be in the 0.05-0.20 range

        example_1: "0.04+0.005*x" -> We start at an orbitable turnrate (0.04) and increase with 0.005 each deflect
        example_2: "0.035+0.0000175*s" -> We now use 's' (speed) in our formula as a variable, as the speed does not increase linearly when using a sigmoid function

        further notes:
        The turnrate is a very precise factor, as the rocket turns every frame (0.0167 seconds) so even a 0.0001 difference could mean a lot!
        You should expect that an optimal formula for turning rate is VERY hard to find.

	    "turnrate limit" - Maximum turnrate
        note: Turnrate limit should be below 1.0, as above 1.0 it overturns and jitters back and forth
    }
    
    Spiking
    {
        Spiking is disabled within ≈2x airblast range!

        What is spiking?
        Spiking is like downspikes in mid-air, it spikes by overturning in a certain turning interval creating the spiking effect
        
        "spiking deflect" - Amount of deflects until the rocket starts spiking, set to 0 to disable
        "spiking strength" - Determines the sharpness of the spikes, value between 1.0 & 2.0
        "spiking time" - Determines the spike size
        "spiking max time" - Disables spiking after 'x' seconds

        note: You should not use this feature at higher speeds, it becomes impossible to hit

        I do not recommend using this feature, as it doesn't really have a place in TFDB,
        it is very hard to create a rocket which incorperates this feature so that it is playable
    }

    Orbitting
    {
        "orbit factor" - Makes orbitting easier / harder

        note: set to 1.0 for no change, lower to make orbitting easier and higher to make orbitting harder,
        works by turning in less/more depending on the factor, this factor could also change the shape of the orbit
    }

    Dragging
    {
        "drag time max" - Amount of time someone can drag

	    "turning delay" - Time after dragging finished until rocket starts turning,
        this is so double movements in drags are not possible whilst still having sharp z-shaped curves when dragging
    }

    Bouncing
    {
        "max bounces" - Number of maximum bounces, will explode if max bounces exceeded

	    "down spiking" - If set to 1 we will have 'classic' crawling downspikes, where the rocket crawls on the floor
        if set to 0 we will have elastic bounces, the rocket bounces off of the ground like a ball would for example

	    "bounce time" (only active when "down spiking" -> 1)
        If bounce time is high -> higher (but fewer) downspikes
        If bounce time is low  -> Lower (but more) downspikes
    }

    Waving
    {
        "wave type" - Type of wave
	    Type 1: Vertical wave,           pattern: https://www.desmos.com/calculator/sopkwm3nph
	    Type 2: Horizontal wave,         pattern: https://www.desmos.com/calculator/jzcbgxlitw
	    Type 3: Circular wave            pattern: https://www.desmos.com/3d/de67de9910
        Type 0: Disabled

        "wave oscillations formula" - Waving formula

        example_1: "5.0-0.001*s" (This formula is clamped between 1.0 & 3.0 oscillations)
        example_2: "3.0-a-b" will go to 2.0 and then 1.0 after 'a' & 'b' thresholds are exceeded

        note: we want less oscillations as the speed increases, as our wave gets compressed due to less time till hitting the target,
        whilst still forcing 3.0 oscillations for example

        Clamps oscillations formula
	    "minimum oscillations"      "1.0" -> minimum oscillations is 1.0
	    "maximum oscillations"      "3.0" -> maximum oscillations is 3.0

        _______________________

	    "wave amplitude formula" - Amplitude formula for waves

        example_1: "0.050-0.00001*s" (This formula is clamped between 0.010 & 0.035)

        We could/should also decrease the amplitude as we have less oscillations,
        as with lesser oscillations the same amplitude will result in a bigger fluctuation, due to spending more time at a high/low point

        Clamps amplitude formula
	    "minimum amplitude"			"0.010"
	    "maximum amplitude"			"0.035"

        note: really small values can again make a difference, as we are modifying the turning direction directly (happens every 0.0167 seconds)
    }
}

Gameplay
{
    "max rockets" - Max number of rockets at 1 time
    "rocket spawn interval" - Spawning interval between rockets

    "max steals" - Max number of steals allowed, set to -1 to allow stealing
    "stolen rockets do damage" - Set to 1 if stolen rockets should do damage, 0 if they shouldn't
    
    "airblast push prevention" - Set to 1 to disable airblasting pushing players, set to 0 if we should be able to airblast players
    "airblast push scale" - Only does something if airblast players is allowed (airblast push prevention -> 0), scales up pushback
    
    "disable player collisions" - Set to 1 to disable player collisions with enemy team, set to 0 to enable blocking of enemies

    "airblast delay" - Recharging time of airblasts, default = 0.75
    "airblastable team rockets" - Make team rockets airblastable if set to 1, set to 0 to not be able to airblast team rockets
    
    "delay time" - Time in orbit until delay prevention starts

    "free for all" - Set to 1 if free for all should be able to be enabled (via voting), set to 0 if disabled
    "ffa voting timeout" - Timeout until a new vote for enabling/disabling can be called

    "never ending rounds" - Set to 1 if NER should be able to be enabled (via voting), set to 0 if disabled    
    "ner voting timeout" - Timeout until a new vote for enabling/disabling can be called

    "solo enabled" - Set to 1 if soloing is allowed, set to 0 otherwise

    "rocket speedometer" - Set to 1 to enable rocket speedometer hud, set to 0 to disable the hud for everyone
}
